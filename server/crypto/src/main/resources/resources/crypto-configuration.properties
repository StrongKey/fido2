# /**
# * Copyright StrongAuth, Inc. All Rights Reserved.
# *
# * Use of this source code is governed by the GNU Lesser General Public License v2.1
# * The license can be found at https://github.com/StrongKey/fido2/blob/master/LICENSE
# */
# ***********************************************
#
#  888b    888          888
#  8888b   888          888
#  88888b  888          888
#  888Y88b 888  .d88b.  888888  .d88b.  .d8888b
#  888 Y88b888 d88""88b 888    d8P  Y8b 88K
#  888  Y88888 888  888 888    88888888 "Y8888b.
#  888   Y8888 Y88..88P Y88b.  Y8b.          X88
#  888    Y888  "Y88P"   "Y888  "Y8888   88888P'
#
# ***********************************************
#
# Centralized configuration properties for StrongKey Lite
#

# ***********************************************
# 8888888888 d8b                        888
# 888        Y8P                        888
# 888                                   888
# 8888888    888 888  888  .d88b.   .d88888
# 888        888 `Y8bd8P' d8P  Y8b d88" 888
# 888        888   X88K   88888888 888  888
# 888        888 .d8""8b. Y8b.     Y88b 888
# 888        888 888  888  "Y8888   "Y88888
# ***********************************************

#Installation directory of the crypto software
crypto.cfg.property.cryptohome=/usr/local/strongkey/crypto
#Maximum length of a 4-char string
crypto.cfg.maxlen.4charstring=4
#Maximum length of a 5-char string
crypto.cfg.maxlen.5charstring=5
#Maximum length of a 6-char string
crypto.cfg.maxlen.6charstring=6
#Maximum length of a 8-char string
crypto.cfg.maxlen.8charstring=8
#Maximum length of a 9-char string
crypto.cfg.maxlen.9charstring=9
#Maximum length of a 10-char string
crypto.cfg.maxlen.10charstring=10
#Maximum length of a 16-char string
crypto.cfg.maxlen.16charstring=16
#Maximum length of a 20-char string
crypto.cfg.maxlen.20charstring=20
#Maximum length of a 32-char string
crypto.cfg.maxlen.32charstring=32
#Maximum length of a 64-char string
crypto.cfg.maxlen.64charstring=64
#Maximum length of a 128-char string
crypto.cfg.maxlen.128charstring=128
#Maximum length of a 256-char string
crypto.cfg.maxlen.256charstring=256
#Maximum length of a 512-char string
crypto.cfg.maxlen.512charstring=512
#Maximum length of a 1024-char string
crypto.cfg.maxlen.1024charstring=1024
#Maximum length of a 2048-char string
crypto.cfg.maxlen.2048charstring=2048
#Maximum length of a 2080-char string
crypto.cfg.maxlen.2080charstring=2080
#Maximum length of a 4096-char string
crypto.cfg.maxlen.4096charstring=4096
#Maximum length of a 8192-char string
crypto.cfg.maxlen.8192charstring=8192
#Maximum length of a 16384-char string
crypto.cfg.maxlen.16384charstring=16384
#Maximum length of a 32768-char string
crypto.cfg.maxlen.32768charstring=32768
#Maximum length of a 65535-char string
crypto.cfg.maxlen.65535charstring=65535
# Suffix to use for encryption public-key-aliases
crypto.cfg.property.encsuffix=-ENC
# Suffix to use for signing public-key-aliases
crypto.cfg.property.signsuffix=-SIGN
# Suffix to use for signing public-key-aliases
crypto.cfg.property.xmlsignsuffix=-XML-SIGN
# Default encryption transform to use with Ciphers
crypto.cfg.property.enctransform=AES/GCM/NoPadding
#Algorithm for certificate's public key of SAKA server
crypto.cfg.property.certalgorithm=EC
#Algorithm for signature on SAKA certificate
crypto.cfg.property.certsigningalgorithm=SHA256withECDSA
#Keysize for digital certificate of SAKA server
crypto.cfg.property.certkeysize=256
#Key curve for EC keys
crypto.cfg.property.hsm.certkeycurve=NIST-P521
#Algorithm for certificate's public key of SAKA server
crypto.cfg.property.hsm.certalgorithm=EC
#Algorithm for signature on SAKA certificate
crypto.cfg.property.hsm.certsigningalgorithm=SHA256withECDSA
#Keysize for HSM digital certificate of SAKA server
crypto.cfg.property.hsm.certkeysize=256
#validity for digital certificate of SAKA server (in days)
crypto.cfg.property.certvalidity=3650


# ***********************************************
#  .d8888b.                    888                           d8b                   888      888
# d88P  Y88b                   888                           Y8P                   888      888
# 888    888                   888                                                 888      888
# 888        888  888 .d8888b  888888  .d88b.  88888b.d88b.  888 88888888  8888b.  88888b.  888  .d88b.
# 888        888  888 88K      888    d88""88b 888 "888 "88b 888    d88P      "88b 888 "88b 888 d8P  Y8b
# 888    888 888  888 "Y8888b. 888    888  888 888  888  888 888   d88P   .d888888 888  888 888 88888888
# Y88b  d88P Y88b 888      X88 Y88b.  Y88..88P 888  888  888 888  d88P    888  888 888 d88P 888 Y8b.
#  "Y8888P"   "Y88888  88888P'  "Y888  "Y88P"  888  888  888 888 88888888 "Y888888 88888P"  888  "Y8888
# ***********************************************

crypto.cfg.property.cryptomodule.type=tpm
# The vendor of the CryptoModule - valid values are: stm, eracom and utimaco
crypto.cfg.property.cryptomodule.vendor=stm
# Whether to start in fips mode or not
crypto.cfg.property.fipsmode=true

# The intent of a personalization string is to introduce additional input into the instantiation of a
# DRBG. This personalization string might contain values unknown to an attacker, or values that
# tend to differentiate this DRBG instantiation from all others. Ideally, a personalization string will
# be set to some bitstring that is as unique as possible. Good sources for the personalization string
# contents include:
# Application identifiers, Device serial numbers, User identification, Per-module or per-device values,
# Timestamps, Network addresses, Special key values for this specific DRBG instantiation,
# Protocol version identifiers, Random numbers, Nonces, and Outputs from other approved or non-approved
# random bit generators.
crypto.cfg.property.fipsdrbg.personalizationstring=
# The strength in bits of the fips drbg
crypto.cfg.property.fipsdrbg.securitystrength=256
# Location of the signing keystore
crypto.cfg.property.signing.keystorelocation=/usr/local/strongkey/skfs/keystores/signingkeystore.bcfks
# Location of the hmac credentials keystore
crypto.cfg.property.hmac.keystorelocation=/usr/local/strongkey/skfs/keystores/signingkeystore.bcfks
# Location of the signing truststore
crypto.cfg.property.signing.truststorelocation=/usr/local/strongkey/skfs/keystores/signingtruststore.bcfks
# Hash algorithm for EC signing
crypto.cfg.property.signing.ec.signaturealgorithm=SHA256withECDSA
# Hash algorithm for RSA signing
crypto.cfg.property.signing.rsa.signaturealgorithm=SHA256withRSA


#JWS keystore and trustore
crypto.cfg.property.jwtsigning.truststorelocation=/usr/local/strongkey/skfs/keystores/jwtsigningtruststore.bcfks
crypto.cfg.property.jwtsigning.password=Abcd1234!
crypto.cfg.property.jwtsigning.threads=10
crypto.cfg.property.jwtsigning.keystorelocation=/usr/local/strongkey/skfs/keystores/jwtsigningkeystore.bcfks
crypto.cfg.property.jwtsigning.algorithm=SHA256withECDSA
crypto.cfg.property.jwtsigning.certsperserver=3
