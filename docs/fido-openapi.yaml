openapi: 3.0.0
info:
  title: FIDO2 Server API
  version: 3.0.0
  description: |
    The FIDO2 Server API provides the registration and authentication web services required to manage user FIDO2 keys.

    All API calls require a cryptographic domain ID ("did"), a FIDO2 protocol ("protocol"), and the type of authentication used ("authtype"). 
    
    Cryptographic domains provide a method of cryptographically separating encrypted data. Each domain uses a different set of encryption keys, a different set of credentials, and can be configured separately to have different behaviors.
    
    The FIDO2 protocol provides a system of standard cryptography techniques that provide strong authentication and protect the integrity of requests made to the FIDO2 server.
    
    The type of authentication instructs the FIDO2 protocols to handle different methods of authentication used to access the server.
  termsOfService: https://www.strongkey.com/privacy-policy-terms-of-use/#terms-of-use
  contact:
    email: support@strongkey.com
  license:
    name: GNU LGPL 2.1+
    url: http://www.fsf.org/licensing/licenses/lgpl.html
servers:
  - url: /skfs/rest 
tags:
  - name: Registration
    description: Register a user and their FIDO2 key using FIDO2 protocols.
  - name: Authentication
    description: Authenticate a user using FIDO2 protocols.
  - name: Key Regulation
    description: Management API for registered FIDO2 keys.
  - name: Accessibility
    description: Operations to verify the integrity of the FIDO2 server.
paths:
  /preregister:
    post:
      summary: Request a one-time challenge for registration.
      description: Step 1 for registering a FIDO2 key. This method creates and returns a challenge to the caller.
      tags:
        - Registration
      operationId: preregister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - svcinfo
                - payload
              properties:
                svcinfo:
                  $ref: '#/components/schemas/svcinfo'
                payload:
                  type: object
                  required:
                    - username
                    - displayname
                    - options
                  properties:
                    username:
                      type: string
                      example: johndoe
                    displayname:
                      type: string
                      example: johndoe_dn
                    options: 
                      type: string
                      example: "{\"attestation\":\"direct\",\"Residentkey\": \"req\",\"userverfication\": true}"
                    extensions:
                      type: string
                      example: "{}"
      responses:
        '200':
          description: Returned a one-time challenge for FIDO2 registration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  rp:
                    type: object
                    properties:
                      name:
                        type: string
                        example: StrongKey demo application
                      id:
                        type: string
                        example: strongkey.com
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                        example: johndoe
                      id:
                        type: string
                        example: 2ipST--mR0l_XeKR1l-sLYR4CgjdvdhrstXaypbnawk
                      displayName:
                        type: string
                        example: Initial Registration
                  challenge:
                    type: string
                    example: zGGO_EfUKgk1yvOoW9Di0w
                  pubKeyCredParams:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          description: Type of key
                          type: string
                          example: public-key
                        alg:
                          type: integer
                          example: -7
                  excludeCredentials:
                    type: array
                    items:
                      type: object
                  attestation:
                    type: string
                    example: direct
        '400':
          $ref: '#/components/responses/BadInput'
        '401':
          $ref: '#/components/responses/BadAuth'
        '404':
          $ref: '#/components/responses/MissingResource'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/UnusedRoute'
  /register:
    post:
      summary: Submit a one-time signed challenge for registration.
      description: Step 2 for registering a FIDO2 key. This API call allows the user to return the signed challenge to the server for verification.
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - svcinfo
                - payload
              properties:
                svcinfo:
                  $ref: '#/components/schemas/svcinfo'
                payload:
                  type: object
                  required:
                    - metadata
                    - response
                  properties:
                    metadata:
                      description: Holds metadata required by the registration route, wrapped into a string.
                      type: string
                      example: "{\"version\": \"1.0\",\"create_location\": \"Sunnyvale, CA\",\"username\": \"johndoe\",\"origin\": \"https://demo4.strongkey.com\"}"
                    response:
                      description: Object containing id, rawId, response (an object which holds attestationObject and clientDataJSON), and type, wrapped into a string.
                      type: string
                      example: "{\"id\":\"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\",\"rawId\": \"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\",\"response\": {\"attestationObject\": \"o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEcwRQIhAKh568CoVnRo3MIwVyLbYTiXuO7FTbsKfuqin4vhpu9YAiAEWQuISPN74PyBD_tpWmjKix9gg_sQjf7xj0hO096XDGN4NWOBWQHkMIIB4DCCAYOgAwIBAgIEbCtY8jAMBggqhkjOPQQDAgUAMGQxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5TdHJvbmdBdXRoIEluYzEiMCAGA1UECxMZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjEYMBYGA1UEAwwPQXR0ZXN0YXRpb25fS2V5MB4XDTE5MDcxODE3MTEyN1oXDTI5MDcxNTE3MTEyN1owZDELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlN0cm9uZ0F1dGggSW5jMSIwIAYDVQQLExlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMRgwFgYDVQQDDA9BdHRlc3RhdGlvbl9LZXkwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQx9IY-uvfEvZ9HaJX3yaYmOqSIYQxS3Oi3Ed7iw4zXGR5C4RaKyOQeIu1hK2QCgoq210KjwNFU3TpsqAMZLZmFoyEwHzAdBgNVHQ4EFgQUNELQ4HBDjTWzj9E0Z719E4EeLxgwDAYIKoZIzj0EAwIFAANJADBGAiEA7RbR2NCtyMQwiyGGOADy8rDHjNFPlZG8Ip9kr9iAKisCIQCi3cNAFjTL03-sk7C1lij7JQ6mO7rhfdDMfDXSjegwuWhhdXRoRGF0YVkBNPgUPcPowj_96fevjVCLWyuOXtHPc57ItRHBr0kyY4M-QQAAAAAAAAAAAAAAAAAAAAAAAAAAALDv1TjffHaHKRTJ_6HTapfASSnIs3Xk3rUyFgNOUzoC5aL6uas7uQDQt0_edIk1h53DoCoCHpFmJaMjKHlvWelbigwlFLWxgwlWRFs1WXAGlLL_Q5balEou9VJGPHNPstewZX-LivspETzci1U5L9wMptifdrENxiJQ1pFcBHUN8cLlQ_eGnKy1oqw4q98KinagDSt-vKZOxSYXtEYo_4w0KIw_9nkSc7yEee0CzjWROKUBAgMmIAEhWCDyaCL1FRBjx_tJLFlnzwTSys214ccamb3iM8ioevGOEiJYIG_S-DmdODz6_GN6nOT4nlcmu55QbWFZXu7anb-KQgdI\",\"clientDataJSON\": \"eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiTENkbXlPQ2ZEUzltZDVJZkFYTzhtZyIsIm9yaWdpbiI6Imh0dHBzOi8vcWEtaW5mb3N5cy1maWRvLTIuc3Ryb25na2V5LmNvbTo4MTgxIn0\"},\"type\": \"public-key\"}"
      responses:
        '200':
          description: The FIDO2 key has been successfully registered.
          content:
            application/json:
              schema:
                type: string
                example: |
                  {} or {"Successfully registered key"}
        '400':
          $ref: '#/components/responses/BadInput'
        '401':
          $ref: '#/components/responses/BadAuth'
        '404':
          $ref: '#/components/responses/MissingResource'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/UnusedRoute'
  /preauthenticate:
    post:
      summary: Request a one-time challenge for authentication.
      description: Step 1 for authenticating a FIDO2 key. This API call creates and returns a challenge to the caller.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - svcinfo
                - payload
              properties:
                svcinfo:
                  $ref: '#/components/schemas/svcinfo'
                payload:
                  type: object
                  required:
                    - username
                  properties:
                    username:
                      description: Name of the current user calling the preauthentication route.
                      type: string
                      example: "johndoe"
                    options:
                      description: Holds options required by the preauthentication route.
                      type: string
                      example: "{}"
      responses:
        '200':
          description: Returned a one-time challenge for FIDO2 authentication.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Response:
                    type: object
                    properties:
                      challenge:
                        type: string
                      allowCredentials:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            id:
                              type: string
                            alg:
                              type: integer
                    example: |
                      {
                        "challenge": "KA44RUt7EazLBRIN32JEeg",
                        "allowCredentials": 
                          [
                            {
                              "type": "public-key",
                              "id": "QQ7PNLnY",
                              "alg": -7
                            }
                          ]
                      }
        '400':
          $ref: '#/components/responses/BadInput'
        '401':
          $ref: '#/components/responses/BadAuth'
        '404':
          $ref: '#/components/responses/MissingResource'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/UnusedRoute'
  /authenticate:
    post:
      summary: Submit a one-time signed challenge for authentication.
      description: Step 2 for authenticating a FIDO2 key. This API call allows the user to return the signed challenge to the server for verification.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - svcinfo
                - payload
              properties:
                svcinfo:
                  $ref: '#/components/schemas/svcinfo'
                payload:
                  type: object
                  required:
                    - metadata
                    - response
                  properties:
                    metadata:
                      description: Holds metadata required by the registration route, wrapped into a string.
                      type: string
                      example: "{\"version\": \"1.0\",\"last_used_location\": \"Sunnyvale, CA\",\"username\": \"johndoe\",\"origin\": \"https://demo4.strongkey.com\"}"
                    response:
                      description: Object containing id, rawId, response (an object which holds attestationObject and clientDataJSON), and type, wrapped into a string.
                      type: string
                      example: "{\"id\":\"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\",\"rawId\": \"79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg\",\"response\": {\"attestationObject\": \"o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEcwRQIhAKh568CoVnRo3MIwVyLbYTiXuO7FTbsKfuqin4vhpu9YAiAEWQuISPN74PyBD_tpWmjKix9gg_sQjf7xj0hO096XDGN4NWOBWQHkMIIB4DCCAYOgAwIBAgIEbCtY8jAMBggqhkjOPQQDAgUAMGQxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5TdHJvbmdBdXRoIEluYzEiMCAGA1UECxMZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjEYMBYGA1UEAwwPQXR0ZXN0YXRpb25fS2V5MB4XDTE5MDcxODE3MTEyN1oXDTI5MDcxNTE3MTEyN1owZDELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlN0cm9uZ0F1dGggSW5jMSIwIAYDVQQLExlBdXRoZW50aWNhdG9yIEF0dGVzdGF0aW9uMRgwFgYDVQQDDA9BdHRlc3RhdGlvbl9LZXkwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQx9IY-uvfEvZ9HaJX3yaYmOqSIYQxS3Oi3Ed7iw4zXGR5C4RaKyOQeIu1hK2QCgoq210KjwNFU3TpsqAMZLZmFoyEwHzAdBgNVHQ4EFgQUNELQ4HBDjTWzj9E0Z719E4EeLxgwDAYIKoZIzj0EAwIFAANJADBGAiEA7RbR2NCtyMQwiyGGOADy8rDHjNFPlZG8Ip9kr9iAKisCIQCi3cNAFjTL03-sk7C1lij7JQ6mO7rhfdDMfDXSjegwuWhhdXRoRGF0YVkBNPgUPcPowj_96fevjVCLWyuOXtHPc57ItRHBr0kyY4M-QQAAAAAAAAAAAAAAAAAAAAAAAAAAALDv1TjffHaHKRTJ_6HTapfASSnIs3Xk3rUyFgNOUzoC5aL6uas7uQDQt0_edIk1h53DoCoCHpFmJaMjKHlvWelbigwlFLWxgwlWRFs1WXAGlLL_Q5balEou9VJGPHNPstewZX-LivspETzci1U5L9wMptifdrENxiJQ1pFcBHUN8cLlQ_eGnKy1oqw4q98KinagDSt-vKZOxSYXtEYo_4w0KIw_9nkSc7yEee0CzjWROKUBAgMmIAEhWCDyaCL1FRBjx_tJLFlnzwTSys214ccamb3iM8ioevGOEiJYIG_S-DmdODz6_GN6nOT4nlcmu55QbWFZXu7anb-KQgdI\",\"clientDataJSON\": \"eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiTENkbXlPQ2ZEUzltZDVJZkFYTzhtZyIsIm9yaWdpbiI6Imh0dHBzOi8vcWEtaW5mb3N5cy1maWRvLTIuc3Ryb25na2V5LmNvbTo4MTgxIn0\"},\"type\": \"public-key\"}"
      responses:
        '200':
          description: The user has been successfully authenticated using their FIDO2 key.
          content:
            application/json:
              schema:
                type: string
                example: |
                    {} or {"Successfully authenticated key"}
        '400':
          $ref: '#/components/responses/BadInput'
        '401':
          $ref: '#/components/responses/BadAuth'
        '404':
          $ref: '#/components/responses/MissingResource'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/UnusedRoute'
  /updatekeyinfo:
    post:
      summary: Updates information about a given FIDO2 key.
      description: This method changes the status of a given key stored in persistent storage. The FIDO2 protocol does not define any activation or deactivation processes. This API call just changes the registered FIDO2 Authenticator to possess a new status in the persistent storage for the purpose of FIDO2 authentication. Since the user can have multiple FIDO2 Authenticators, a key ID is passed to the server. This key ID can be obtained by making a *getkeysinfo* call, which will return an array of registered key metadata with each entry being mapped to a key ID. Client applications will need to cache these IDs in order to activate, deactivate, or register keys.
      tags:
        - Key Regulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - svcinfo
                - payload
              properties:
                svcinfo:
                  $ref: '#/components/schemas/svcinfo'
                payload:
                  type: object
                  properties:
                    status:
                      description: Current status of the FIDO2 key, whether it is Active or Inactive.
                      type: string
                      example: "Active"
                    modify_location:
                      description: Location of the update request.
                      type: string
                      example: "Cupertino, CA"
                    displayname:
                      description: Name of the FIDO2 key being updated.
                      type: string
                      example: "johndoe"
                    keyid:
                      description: ID of the FIDO2 key being updated.
                      type: string
                      example: "1-1-johndoe-154"
      responses:
        '200':
          description: The FIDO2 key status has been updated successfully.
          content:
            application/json:
              schema:
                type: string
                example: |
                  {
                    "Response": "Successfully updated user registered security key."
                  }
        '400':
          $ref: '#/components/responses/BadInput'
        '401':
          $ref: '#/components/responses/BadAuth'
        '404':
          $ref: '#/components/responses/MissingResource'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/UnusedRoute'
  /getkeysinfo:
    post:
      summary: Returns all keys associated with a registered user.
      description: Returns a list of all registered FIDO2 Authenticators belonging to a specified user.
      tags:
        - Key Regulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - svcinfo
                - payload
              properties:
                svcinfo:
                  $ref: '#/components/schemas/svcinfo'
                payload:
                  type: object
                  properties:
                    username:
                      description: Name of the active user.
                      type: string
                      example: "johndoe"
      responses:
        '200':
          description: Returned an array of keys belonging to the specified user.
          content:
            application/json:
              schema:
                type: string
                example: Key values
        '400':
          $ref: '#/components/responses/BadInput'
        '401':
          $ref: '#/components/responses/BadAuth'
        '404':
          $ref: '#/components/responses/MissingResource'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/UnusedRoute'
  /deregister:
    post:
      summary: Deregisters a registered key.
      description: Deregisters a FIDO2 Authenticator. This API call requires a username and key ID in order to point to a unique key registered to that user. The key ID can be obtained by making a call to *getkeysinfo*.
      tags:
        - Key Regulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - svcinfo
                - payload
              properties:
                svcinfo:
                  $ref: '#/components/schemas/svcinfo'
                payload:
                  type: object
                  properties:
                    keyid:
                      description: ID for the key to be removed
                      type: string
                      example: "79U433x2hykUyf-h02qXwEkpyLN15N61MhYDTlM6AuWi-rmrO7kA0LdP3nSJNYedw6AqAh6RZiWjIyh5b1npW4oMJRS1sYMJVkRbNVlwBpSy_0OW2pRKLvVSRjxzT7LXsGV_i4r7KRE83ItVOS_cDKbYn3axDcYiUNaRXAR1DfHC5UP3hpystaKsOKvfCop2oA0rfrymTsUmF7RGKP-MNCiMP_Z5EnO8hHntAs41kTg"
      responses:
        '200':
          description: The specified FIDO2 key has been successfully deregistered.
          content:
            application/json:
              schema:
                type: string
                example: Key Values
        '400':
          $ref: '#/components/responses/BadInput'
        '401':
          $ref: '#/components/responses/BadAuth'
        '404':
          $ref: '#/components/responses/MissingResource'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/UnusedRoute'
  /ping:
    post:
      summary: Verifies that the FIDO2 server is active and accepting requests.
      tags:
       - Accessibility
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - svcinfo
              properties:
                svcinfo:
                  $ref: '#/components/schemas/svcinfo'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadInput'
        '401':
          $ref: '#/components/responses/BadAuth'
        '404':
          $ref: '#/components/responses/MissingResource'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          $ref: '#/components/responses/UnusedRoute'
components:
  schemas:
    svcinfo:
      description: The service credentials for the web service.
      type: object
      required:
        - did
        - protocol
        - authtype
      properties:
        did:
          description: The cryptographic domain ID that is responsible for performing API transactions.
          type: integer
          maxLength: 5
          example: 1
        protocol:
          description: The protocol used by the server for interacting with FIDO2 keys.
          type: string
          example: FIDO2_0
        authtype:
          description: Type of authentication given, can either be a password or HMAC.
          type: string
          example: PASSWORD
        svcusername:
          description: The service credential username. *Only required for password authentication.*
          type: string
          example: svcfidouser
        svcpassword:
          description: The service credential password. *Only required for password authentication.*
          type: string
          format: password
          example: Abcd1234!
    preregisterpayload:
      description: The payload containing information for the preregister route.
      type: object
      required:
        - username
        - displayname
      properties:
        username:
          description: The current user calling the preregister API.
          type: string
          example: johndoe
        displayname:
          description: The name of the FIDO2 key that will attempt the registry challenge.
          type: string
          example: johndoe_dn
        options: 
          description: Holds options required by the preregistration route, wrapped inside of a string.
          type: object
          properties:
            attestation:
              description: The type of proof required to verify the challenge.
              type: string
              example: direct
            Residentkey:
              description: Determines whether a preregistered key is required for the challenge.
              type: string
              example: req
            userverification:
              description: Determines whether or not user presence is required to verify the challenge.
              type: boolean
              example: true
        extensions:
          description: Any further options that can be passed into the route.
          type: string
          example: "{}"
    registerpayload:
      description: The payload containing information for the register route.
      type: object
      required:
        - metadata
        - response
      properties:
        metadata:
          description: Holds metadata required by the registration route, wrapped into a string.
          type: object
          properties:
            version:
              description: Current version of the registration challenge.
              type: string
              example: 1.0
            create_location:
              description: Location of origin for the signed registration challenge.
              type: string
              example: Sunnyvale, CA
            username:
              description: Username of the account submitting the signed registration challenge.
              type: string
              example: johndoe
            origin:
              description: The location of the server that sent the initial challenge.
              type: string
              example: https://demo4.strongkey.com
        response:
          description: Object containing id, rawId, response (an object which holds attestationObject and clientDataJSON), and type, wrapped into a string.
          type: object
          properties:
            id:
              description: The ID of the user attempting the registry.
              type: string
              example: 79U...kTg
            rawId:
              description: The ID of the user without any formatting (same as 'id' in normal cases).
              type: string
              example: 79U...kTg
            response:
              description: The response from the server.
              type: object
              properties:
                attestationObject:
                  description: The object containing the proof that the signed challenge is permitted.
                  type: string
                  example: o2N...gdI
                clientDataJSON:
                  description: Data from the web client handling the authentication.
                  type: string
                  example: eyJ...In0
            type:
              description: The type of key used to handle the signed challenge.
              type: string
              example: public-key
    preauthenticatepayload:
      description: The payload containing information for the preauthenticate route.
      type: object
      required:
        - username
      properties:
        username:
          description: Name of the current user calling the preauthentication route.
          type: string
          example: "johndoe"
        options:
          description: Holds options required by the preauthentication route.
          type: string
          example: "{}"
    authenticatepayload:
      description: The payload containing information for the preauthenticate route.
      type: object
      required:
        - metadata
        - response
      properties:
        metadata:
          description: Holds metadata required by the registration route, wrapped into a string.
          type: object
          properties:
            version:
              description: Current version of the authentication challenge.
              type: string
              example: 1.0
            create_location:
              description: Location of the last attempted authentication challenge.
              type: string
              example: Sunnyvale, CA
            username:
              description: Username of the account submitting the signed authentication challenge.
              type: string
              example: johndoe
            origin:
              description: The location of the server that sent the initial challenge.
              type: string
              example: https://demo4.strongkey.com
        response:
          description: Object containing id, rawId, response (an object which holds authenticatorData, signature, userHandle, and clientDataJSON), and type, wrapped into a string.
          type: object
          properties:
            id:
              description: The ID of the user attempting the registry.
              type: string
              example: 79U...kTg
            rawId:
              description: The ID of the user without any formatting (same as 'id' in normal cases).
              type: string
              example: 79U...kTg
            response:
              description: The response from the server.
              type: object
              properties:
                authenticatorData:
                  description: Data describing the authenticator to the server.
                  type: string
                  example: Nc7...Q==
                signature:
                  description: The signature which verifies that the challenge was completed.
                  type: string
                  example: MEY...eoW
                userHandle:
                  description: (Not implemented yet).
                  type: string
                  example: ""
                clientDataJSON:
                  description: Data from the web client handling the authentication.
                  type: string
                  example: eyJ...In0
            type:
              description: The type of key used to fulfill the authentication request.
              type: string
              example: public-key
    updatekeyinfopayload:
      description: The payload containing information for the Update Key route.
      type: object
      required:
        - keyid
        - displayname
        - modify_location
        - status
      properties:
        status:
          description: Current status of the FIDO2 key, whether it is Active or Inactive.
          type: string
          example: "Active"
        modify_location:
          description: Location of the update request.
          type: string
          example: "Cupertino, CA"
        displayname:
          description: Name of the FIDO2 key being updated.
          type: string
          example: "johndoe"
        keyid:
          description: ID of the FIDO2 key being updated.
          type: string
          example: "1-1-johndoe-154"
    getkeysinfopayload:
      description: The payload containing information for the Get Key route.
      type: object
      required:
        - username
      properties:
        username:
          description: Name of the active user.
          type: string
          example: "johndoe"
    deregisterpayload:
      description: The payload containing information for the deregister route.
      type: object
      required:
        - keyid
      properties:
        keyid:
          description: ID for the key to be removed.
          type: string
          example: 79U...kTg
    Response:
      description: Response JSON object returned by web services.
      properties:
        Response:
          description: The result of the API call; typically an error message for returns that are not 200.
          type: string
  responses:
    SuccessResponse:
      description: The request was successfullly processed by the FIDO2 server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example: |
            {
              "Response": "",
            }
    BadAuth:
      description: The HMAC authentication failed.
    MissingResource:
      description: The requested resource is unavailable.
    BadInput:
      description: There was an error in the submitted input.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example: |
            {
              "Response": "",
            }
    ServerError:
      description: The server ran into an unexpected exception.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Error report</title><style type="text/css"><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - Internal Server Error</h1><hr/><p><b>type</b> Exception report</p><p><b>message</b>Internal Server Error</p><p><b>description</b>The server encountered an internal error that prevented it from fulfilling this request.</p><hr/></body></html>'
    UnusedRoute:
      description: Unused routes return a 501 exception with an error message.
      content:
        application/json:
          schema:
            type: string
          example: "can't parse JSON.  Raw result:\n\nnot yet implemented"
